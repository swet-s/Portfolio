/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Berk Gedik (https://sketchfab.com/berkgedik)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/cyberpunk-laptop-concept-design-fddc4e68cc6c498b88b19af1a05bd420
Title: CyberPunk Laptop Concept Design
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";

import laptop from "./laptop.glb";
import { a } from "@react-spring/three";
import { useFrame, useThree } from "@react-three/fiber";

const Laptop = (props) => {
    const laptopRef = useRef();

    const [isRotating, setIsRotating] = useState(false);

    // Get access to the Three.js renderer and viewport
    const { gl, viewport } = useThree();
    const { nodes, materials } = useGLTF(laptop);

    // Use a ref for the last mouse x position
    const lastX = useRef(0);
    // Use a ref for rotation speed
    const rotationSpeed = useRef(0);
    // Define a damping factor to control rotation damping
    const dampingFactor = 0.95;
    //
    const uniformRotationSpeed = -0.01;

    // Handle pointer (mouse or touch) down event
    const handlePointerDown = (event) => {
        event.stopPropagation();
        event.preventDefault();
        setIsRotating(true);

        // Calculate the clientX based on whether it's a touch event or a mouse event
        const clientX = event.touches ? event.touches[0].clientX : event.clientX;

        // Store the current clientX position for reference
        lastX.current = clientX;
    };

    // Handle pointer (mouse or touch) up event
    const handlePointerUp = (event) => {
        event.stopPropagation();
        event.preventDefault();
        setIsRotating(false);
    };

    // Handle pointer (mouse or touch) move event
    const handlePointerMove = (event) => {
        event.stopPropagation();
        event.preventDefault();
        if (isRotating) {
            // If rotation is enabled, calculate the change in clientX position
            const clientX = event.touches ? event.touches[0].clientX : event.clientX;

            // calculate the change in the horizontal position of the mouse cursor or touch input,
            // relative to the viewport's width
            const delta = (clientX - lastX.current) / viewport.width;

            // Update the island's rotation based on the mouse/touch movement
            laptopRef.current.rotation.y += delta * 0.01 * Math.PI;

            // Update the reference for the last clientX position
            lastX.current = clientX;

            // Update the rotation speed
            rotationSpeed.current = delta * 0.05 * Math.PI;
        }
    };

    useEffect(() => {
        // Add event listeners for pointer and keyboard events
        const canvas = gl.domElement;
        canvas.addEventListener("pointerdown", handlePointerDown);
        canvas.addEventListener("pointerup", handlePointerUp);
        canvas.addEventListener("pointermove", handlePointerMove);

        // Remove event listeners when component unmounts
        return () => {
            canvas.removeEventListener("pointerdown", handlePointerDown);
            canvas.removeEventListener("pointerup", handlePointerUp);
            canvas.removeEventListener("pointermove", handlePointerMove);
        };
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

    // This function is called on each frame update
    useFrame(() => {
        // If not rotating, apply damping to slow down the rotation (smoothly)
        if (!isRotating) {
            // Apply damping factor
            rotationSpeed.current *= dampingFactor;

            // Stop rotation when speed is very small
            if (Math.abs(rotationSpeed.current) < 0.001) {
                rotationSpeed.current = 0;
            }

            laptopRef.current.rotation.y += rotationSpeed.current;
        }

        laptopRef.current.rotation.y += uniformRotationSpeed;
        // laptopRef.current.rotation.x += uniformRotationSpeed;

        //     Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
        laptopRef.current.rotation.y =
            ((laptopRef.current.rotation.y % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
    });

    return (
        <a.group ref={laptopRef} {...props}>
            <group position={[0, 50.454, -8.888]} rotation={[-1.943, 0, -Math.PI / 2]} scale={100}>
                <mesh geometry={nodes.Cube_Auto_04_0.geometry} material={materials.Auto_04} />
                <mesh geometry={nodes.Cube_Screen_0.geometry} material={materials.Screen} />
            </group>
            <mesh
                geometry={nodes.Cube004_Auto_01_0.geometry}
                material={materials.Auto_01}
                position={[0, -25.593, 7.313]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube007_Auto_01_0.geometry}
                material={materials.Auto_01}
                position={[0, -40.159, 75.441]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Keys_Auto_02_0.geometry}
                material={materials.Auto_02}
                position={[-72.227, -27.683, 35.45]}
                rotation={[-Math.PI / 2, 0, 0.002]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube012_Auto_02_0.geometry}
                material={materials.Auto_02}
                position={[-91.067, -25.462, 22.757]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube018_Auto_02_0.geometry}
                material={materials.Auto_02}
                position={[-60.215, -21.794, -5.752]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube019_Auto_02_0.geometry}
                material={materials.Auto_02}
                position={[-24.726, -21.794, -5.752]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube013_Auto_02_0.geometry}
                material={materials.Auto_02}
                position={[-91.352, -28.7, 4.165]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube006_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[17.369, -25.593, 7.313]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube005_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[0, -25.593, 7.313]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube017_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[100.654, -28.853, 25.184]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube001_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[0, 50.454, -8.888]}
                rotation={[-1.943, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.BezierCurve001_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[-74.932, -17.338, -70.693]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.BezierCurve_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[-74.932, -19.174, -70.693]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.BezierCurve002_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[-74.932, -20.537, -70.693]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube015_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[-182.229, -22.98, 7.313]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube014_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[-182.229, -22.98, 7.313]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cylinder_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[7.52, 0.851, 2.928]}
                rotation={[-2.049, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cylinder002_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[-3.494, 0.851, 2.928]}
                rotation={[-2.049, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube016_Auto_03_0.geometry}
                material={materials.Auto_03}
                position={[-0.605, -11.893, -52.539]}
                rotation={[2.55, 0.005, -1.581]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube002_Auto_04_0.geometry}
                material={materials.Auto_04}
                position={[0, 50.454, -8.888]}
                rotation={[-1.943, 0, 0]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube003_Auto_04_0.geometry}
                material={materials.Auto_04}
                position={[0, 50.454, -8.888]}
                rotation={[-1.943, 0, -Math.PI / 2]}
                scale={100}
            />
            <mesh
                geometry={nodes.Cube020_Auto_04_0.geometry}
                material={materials.Auto_04}
                position={[0, 50.454, -8.888]}
                rotation={[-1.943, 0, -Math.PI / 2]}
                scale={100}
            />
        </a.group>
    );
};

export default Laptop;
